{
  "name": "json",
  "description": "JSON for ChiÏ‡",
  "version": "0.0.3",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/json.git"
  },
  "dependencies": {
    "JSONPath": "0.x.x",
    "json-gate": "0.x.x",
    "json-path": "0.x.x",
    "json-query": "^2.1.1",
    "json2xml": "0.1.x",
    "xml2json": "0.x.x"
  },
  "nodes": [
    {
      "name": "createSchema",
      "ns": "json",
      "title": "JSON Schema",
      "description": "Instantiate a JSON Schema",
      "phrases": {
        "active": "Creating JSON Schema"
      },
      "ports": {
        "input": {
          "in": {
            "type": "object",
            "title": "JSON Schema",
            "format": "json",
            "required": true
          }
        },
        "output": {
          "error": {
            "type": "object",
            "title": "Error"
          },
          "out": {
            "type": "object",
            "title": "JSON Schema"
          }
        }
      },
      "dependencies": {
        "npm": {
          "json-gate": "0.x.x"
        }
      },
      "fn": "output.out = $.write('in', json_gate.createSchema($.in));\n"
    },
    {
      "name": "parse",
      "ns": "json",
      "title": "JSON Parse",
      "description": "Parses a string into a javascript object",
      "expose": [
        "JSON"
      ],
      "async": true,
      "phrases": {
        "active": "Parsing JSON string"
      },
      "ports": {
        "input": {
          "in": {
            "type": "string",
            "title": "JSON String",
            "required": true
          },
          "reviver": {
            "type": "function",
            "title": "prescribes how the value originally produced by parsing is transformed, before being returned",
            "default": null
          }
        },
        "output": {
          "out": {
            "type": "object",
            "title": "The Javascript Object"
          }
        }
      },
      "fn": "/* output.out = JSON.parse($.in, $.reviver); */\n\non.input.in = function () {\n  output({out: $.write('in', JSON.parse($.in, state.reviver))});\n};\n\non.input.reviver = function () {\n  state.reviver = $.reviver;\n};\n"
    },
    {
      "name": "path",
      "ns": "json",
      "title": "JSON Path",
      "description": "JSON-Path takes a specially formatted path statement and applies it to an object graph in order to select results. The results are returned as an array of data that matches the path.",
      "async": true,
      "phrases": {
        "active": "Performing JSON Path"
      },
      "ports": {
        "input": {
          "json": {
            "type": "object",
            "title": "Input JSON",
            "description": "Any JSON document",
            "required": true
          },
          "path": {
            "type": "string",
            "title": "Path",
            "description": "",
            "required": true
          }
        },
        "output": {
          "matches": {
            "type": "array",
            "title": "Selection Output",
            "description": ""
          }
        }
      },
      "dependencies": {
        "npm": {
          "json-path": "0.x.x"
        }
      },
      "fn": "on.input.json = function () {\n  output({\n    matches: $.create(json_path.resolve($.json, $.path))\n  });\n};\n\n"
    },
    {
      "name": "query",
      "ns": "json",
      "title": "JSON Query",
      "description": "Retrieves values from JSON objects",
      "async": true,
      "phrases": {
        "active": "Querying JSON"
      },
      "ports": {
        "input": {
          "in": {
            "type": "object",
            "title": "JSON",
            "required": true
          },
          "query": {
            "type": "string",
            "title": "Query"
          }
        },
        "output": {
          "out": {
            "type": "object",
            "title": "Object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "json-query": "latest"
        }
      },
      "fn": "on.input.in = function () {\n  output({\n    out: $.write('in', json_query($.query, {data: $.in}).value)\n  });\n};\n"
    },
    {
      "name": "stringify",
      "ns": "json",
      "title": "JSON Stringify",
      "description": "Stringify a javascript object",
      "expose": [
        "JSON"
      ],
      "async": true,
      "phrases": {
        "active": "JSON Stringifying Object"
      },
      "ports": {
        "input": {
          "in": {
            "type": "any",
            "title": "Input Object",
            "async": true,
            "required": true
          },
          "replacer": {
            "type": "any",
            "title": "Replacer",
            "description": "A function that alters the behavior of the stringification process, or an array of String and Number objects that serve as a whitelist for selecting the properties of the value object to be included in the JSON string. If this value is null or not provided, all properties of the object are included in the resulting JSON string.",
            "default": null
          },
          "space": {
            "type": "number",
            "title": "Indentation length",
            "default": 0
          }
        },
        "output": {
          "out": {
            "type": "string",
            "title": "The JSON string"
          }
        }
      },
      "fn": "//output.out = JSON.stringify($. in , $.replacer, $.space);\non.input.in = function() {\n\n  output({\n    out: JSON.stringify($.in, $.replacer, $.space)\n  });\n\n};\n"
    },
    {
      "name": "toxml",
      "ns": "json",
      "title": "JSON To XML",
      "description": "Converts JSON to Simple XML",
      "phrases": {
        "active": "Parsing JSON string"
      },
      "ports": {
        "input": {
          "json": {
            "type": "object",
            "title": "JSON",
            "required": true
          },
          "root": {
            "type": "string",
            "title": "Root Element",
            "default": ""
          },
          "header": {
            "type": "boolean",
            "title": "Add Header?",
            "default": true
          }
        },
        "output": {
          "out": {
            "type": "object",
            "title": "The Javascript Object"
          },
          "error": {
            "type": "object",
            "title": "Error"
          }
        }
      },
      "dependencies": {
        "npm": {
          "json2xml": "0.1.x"
        }
      },
      "fn": "var obj = {};\nif ($.root) {\n  obj[$.root] = $.json;\n} else {\n  obj = $.json;\n}\n\noutput.out = $.create(json2xml(obj, {header: $.header}));\n\n/*\non.input.root = function() {\n  state.root = $.root;\n};\n\non.input.header = function() {\n  state.header = $.header;\n};\n\non.input.json = function() {\n\n  var obj = {};\n  if(state.root) {\n    obj[state.root] = $.json;\n  } else {\n    obj = $.json;\n  }\n\n  output({\n    out: json2xml($.json, { header: state.header })\n  });\n\n};\n*/\n"
    },
    {
      "name": "validate",
      "ns": "json",
      "async": true,
      "title": "Validate JSON",
      "description": "Validates JSON agains JSON Schema",
      "phrases": {
        "active": "Validating JSON"
      },
      "ports": {
        "input": {
          "in": {
            "type": "object",
            "async": true,
            "title": "JSON",
            "format": "json",
            "required": true
          },
          "schema": {
            "type": "object",
            "title": "JSON Gate Schema"
          }
        },
        "output": {
          "error": {
            "type": "object",
            "title": "Error"
          },
          "out": {
            "type": "object",
            "title": "The Validated Object"
          }
        }
      },
      "fn": "on.input.in = function () {\n  try {\n    $.schema.validate($.in)\n    output({out: $.get('in')});\n  } catch(err) {\n    output({ error: $.create(err) });\n  }\n};\n"
    }
  ]
}