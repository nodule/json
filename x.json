{
  "name": "utils",
  "description": "Utility components for ChiÏ‡",
  "version": "0.0.3",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/utils.git"
  },
  "dependencies": {
    "inquiry": "0.x.x",
    "JSONPath": "0.x.x",
    "glob": "3.x.x",
    "xml2json": "0.x.x",
    "csv": "0.x.x",
    "json-path": "0.x.x",
    "xml2js": "0.x.x",
    "json2xml": "psichi/json2xml"
  },
  "nodes": [
    {
      "ports": {
        "input": {
          "json": {
            "type": "object",
            "title": "JSON",
            "required": true
          },
          "root": {
            "type": "string",
            "title": "Root Element",
            "default": ""
          },
          "header": {
            "type": "boolean",
            "title": "Add Header?",
            "default": true
          }
        },
        "output": {
          "out": {
            "type": "object",
            "title": "The Javascript Object"
          },
          "error": {
            "type": "object",
            "title": "Error"
          }
        }
      },
      "phrases": {
        "active": "Parsing JSON string"
      },
      "async": true,
      "require": {
        "json2xml": "psichi/json2xml"
      },
      "description": "Converts JSON to Simple XML",
      "title": "JSON To XML",
      "ns": "json",
      "name": "2xml",
      "fn": "/*\nvar obj = {};\nif(input.root) {\n  obj[input.root] = input.json;\n} else {\n  obj = input.json;\n}\n\noutput.out = json2xml(obj, { header: input.header });\n*/\n\non.input.root = function() {\n  state.root = data;\n};\n\non.input.header = function() {\n  state.header = data;\n};\n\non.input.json = function() {\n\n  var obj = {};\n  if(state.root) {\n    obj[state.root] = data;\n  } else {\n    obj = data;\n  }\n\n  output({\n    out: json2xml(data, { header: state.header })\n  });\n\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "type": "string",
            "title": "JSON String",
            "required": true
          },
          "reviver": {
            "type": "function",
            "title": "prescribes how the value originally produced by parsing is transformed, before being returned",
            "default": null
          }
        },
        "output": {
          "out": {
            "type": "object",
            "title": "The Javascript Object"
          }
        }
      },
      "phrases": {
        "active": "Parsing JSON string"
      },
      "async": true,
      "expose": [
        "JSON"
      ],
      "description": "Parses a string into a javascript object",
      "title": "JSON Parse",
      "ns": "json",
      "name": "parse",
      "fn": "/* output.out = JSON.parse(input.in, input.reviver); */\n\non.input.in = function() {\n  output({\n    out: JSON.parse(data, state.reviver)\n  });\n};\n\non.input.reviver = function() {\n  state.reviver = data;\n};\n"
    },
    {
      "ports": {
        "input": {
          "json": {
            "type": "object",
            "title": "Input JSON",
            "description": "Any JSON document",
            "required": true
          },
          "path": {
            "type": "string",
            "title": "Path",
            "description": "",
            "required": true
          }
        },
        "output": {
          "matches": {
            "type": "array",
            "title": "Selection Output",
            "description": ""
          }
        }
      },
      "phrases": {
        "active": "Performing JSON Path"
      },
      "async": true,
      "require": {
        "json-path": "0.x.x"
      },
      "description": "JSON-Path takes a specially formatted path statement and applies it to an object graph in order to select results. The results are returned as an array of data that matches the path.",
      "title": "JSON Path",
      "ns": "json",
      "name": "path",
      "fn": "/* output = { matches: json_path.resolve(input.json, input.path) } */\non.input.json = function() {\n  output({\n   matches: json_path.resolve(data, state.path)\n  });\n};\n\non.input.path = function() {\n  state.path = data;\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "type": "object",
            "title": "Input Object",
            "required": true
          },
          "replacer": {
            "type": "any",
            "title": "Replacer",
            "description": "A function that alters the behavior of the stringification process, or an array of String and Number objects that serve as a whitelist for selecting the properties of the value object to be included in the JSON string. If this value is null or not provided, all properties of the object are included in the resulting JSON string.",
            "default": null
          },
          "space": {
            "type": "number",
            "title": "Indentation length",
            "default": 0
          }
        },
        "output": {
          "json": {
            "type": "string",
            "title": "The JSON string"
          }
        }
      },
      "phrases": {
        "active": "JSON Stringifying Object"
      },
      "expose": [
        "JSON"
      ],
      "description": "Stringify a javascript object",
      "title": "JSON Stringify",
      "ns": "json",
      "name": "stringify",
      "fn": "output.out = JSON.stringify(input.in, input.replacer, input.space);\n"
    }
  ],
  "twigs": []
}